{"version":3,"file":"playback.js","sourceRoot":"","sources":["playback.ts"],"names":[],"mappings":"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","sourcesContent":["import { ReactiveController, ReactiveElement } from 'lit';\nimport { NoteEvent } from './noteevent.js';\nimport './zyklus.js';\nimport * as Tone from 'tone';\nimport { getNotation } from './music.js';\nimport { EventBus } from './eventbus.js';\n\nexport class PlayStateChangeEvent extends Event {\n    static readonly type = 'playstatechange';\n    constructor() {\n        super(PlayStateChangeEvent.type);\n    }\n}\n\n/**\n * Playback controller for MIDI playback\n * This controller is offered as a possible MIDI player, but is not\n * explicitly tied to the midi-sequence-timeline implementation\n * Users of the midi-sequence-timeline library can use this controller or use a different one for playback\n */\nexport class Playback extends EventBus implements ReactiveController {\n    static hosts: ReactiveElement[] = [];\n\n    protected static playbackRate = 1;\n    protected static _currentTime = 0;\n    protected static _clockOffset = 0;\n\n    protected static isPlaying = false;\n    protected static isPaused = false;\n    protected static isLooping = false;\n\n    protected static _start = 0;\n    protected static _end?: number;\n\n    protected static clock?: AudioContext;\n    protected static synth?: Tone.PolySynth;\n    protected static _sequence: NoteEvent[] = [];\n    protected static _notebuffer: NoteEvent[] = [];\n\n    constructor(host: ReactiveElement) {\n        super();\n        host.addController(this);\n        Playback.hosts.push(host);\n    }\n\n    hostConnected() {}\n\n    hostDisconnected() {}\n\n    static set sequence(_events: NoteEvent[]) {\n        Playback._sequence = _events;\n    }\n\n    set sequence(_events: NoteEvent[]) {\n        Playback.sequence = _events;\n    }\n\n    static get duration() {\n        if (Playback._end) return Playback._end - Playback._start;\n        return Math.ceil(Playback._sequence[Playback._sequence.length - 1].time) || 0;\n    }\n\n    get duration() { return Playback.duration; }\n\n    static play() {\n        if (!Playback.clock) Playback.clock = new AudioContext();\n        if (!Playback.synth) Playback.synth = new Tone.PolySynth(Tone.Synth).toDestination();\n        if (Playback._notebuffer.length === 0) Playback._notebuffer = Playback._sequence.filter(e => e.time >= Playback._start && e.time <= Playback._start + Playback.duration);\n\n        if (!Playback.isPlaying && !Playback.isPaused) {\n            // @ts-ignore\n            Playback.clock.createClock(Playback.tick, 0.05).start();\n            Playback.isPlaying = true;\n            Playback.isPaused = false;\n        } else if (Playback.isPaused) {\n            Playback.clock?.resume();\n            Playback.isPaused = false;\n            Playback.isPlaying = true;\n        }\n\n        this.hosts.forEach(host => {\n            host.requestUpdate();\n        });\n        Playback.dispatchEvent(new PlayStateChangeEvent());\n    }\n\n    play() { Playback.play(); }\n\n    /*static seek(time: number) {\n        if (Playback.clock?.state === 'running') {\n            Playback._clockOffset = Playback.clock.currentTime;\n        } else {\n            Playback._clockOffset = 0;\n        }\n        Playback._start = time;\n        Playback._notebuffer = Playback._sequence.filter(e => e.time >= time && e.time <= Playback._start + Playback.duration);\n    }*/\n\n    static seek(time: number) {\n        Playback._notebuffer = Playback._sequence.filter(e => e.time >= time && e.time <= Playback._start + Playback.duration);\n        Playback._currentTime = time;\n    }\n\n    seek(time: number) { Playback.seek(time); }\n\n    static async pause() {\n        await Playback.clock?.suspend();\n        Playback.isPaused = true;\n        Playback.isPlaying = false;\n        this.hosts.forEach(host => host.requestUpdate());\n        Playback.dispatchEvent(new PlayStateChangeEvent());\n    }\n\n    async pause() { await Playback.pause(); }\n\n    static async stop() {\n        await Playback.clock?.close();\n        Playback.isPaused = false;\n        Playback.isPlaying = false;\n        Playback.dispatchEvent(new PlayStateChangeEvent());\n    }\n\n    static get currentTime() {\n        return Playback._currentTime;\n    }\n\n    get currentTime() { return Playback.currentTime; }\n\n    static set rate(val: number) {\n        /*if (Playback.part) {\n            Playback.part.playbackRate = val;\n        }*/\n        Playback.playbackRate = val;\n        Playback.hosts.forEach(host => {\n            host.requestUpdate();\n        });\n    }\n\n    static get rate() {\n        return Playback.playbackRate;\n    }\n\n    get rate() { return Playback.rate; }\n\n    set rate(val: number) {\n        Playback.playbackRate = val;\n    }\n\n    static loop(start: number, end: number) {\n        Playback._end = end;\n        Playback._start = start;\n        Playback.isLooping = true;\n        Playback.seek(start);\n    }\n\n    loop(start: number, end: number) { Playback.loop(start, end); }\n\n    static tick(_time: number, duration: number, _tick: number) {\n        const next = Playback._notebuffer[0];\n        //Playback._currentTime = ((time - Playback._clockOffset) + Playback._start) * Playback.playbackRate;\n        Playback._currentTime += duration * Playback.playbackRate;\n        if (Playback._currentTime >= next.time - 0.2) {\n            const event = Playback._notebuffer.shift();\n            if (event) {\n                const now = Tone.now();\n                Playback.synth?.triggerAttackRelease(\n                    getNotation(event.note),\n                    event.duration, now + Math.max(0, next.time - Playback._currentTime),\n                    event.velocity / 127);\n            }\n        }\n        if (Playback._notebuffer.length === 0) {\n            if (Playback.isLooping) {\n                Playback.seek(Playback._start);\n            } else {\n                Playback.clock?.suspend();\n                Playback.isPlaying = false;\n            }\n        }\n    }\n\n    get isPlaying() { return Playback.isPlaying; }\n    get isPaused() { return Playback.isPaused; }\n    get isLooping() { return Playback.isLooping; }\n}"]}